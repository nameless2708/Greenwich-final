package com.company.movie_review.movie_review.movie_review.movie_review.generated;

import com.company.movie_review.movie_review.movie_review.movie_review.MovieReview;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.company.movie_review.movie_review.movie_review.movie_review.MovieReview}-interface
 * representing entities of the {@code movie_review}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedMovieReview {
    
    /**
     * This Field corresponds to the {@link MovieReview} field that can be
     * obtained using the {@link MovieReview#getId()} method.
     */
    IntField<MovieReview, Integer> ID = DatastoreFields.createIntField(
        Identifier.ID,
        MovieReview::getId,
        MovieReview::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link MovieReview} field that can be
     * obtained using the {@link MovieReview#getMovieId()} method.
     */
    ComparableField<MovieReview, Integer, Integer> MOVIE_ID = DatastoreFields.createComparableField(
        Identifier.MOVIE_ID,
        o -> OptionalUtil.unwrap(o.getMovieId()),
        MovieReview::setMovieId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link MovieReview} field that can be
     * obtained using the {@link MovieReview#getContent()} method.
     */
    StringField<MovieReview, String> CONTENT = DatastoreFields.createStringField(
        Identifier.CONTENT,
        o -> OptionalUtil.unwrap(o.getContent()),
        MovieReview::setContent,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link MovieReview} field that can be
     * obtained using the {@link MovieReview#getTag()} method.
     */
    ComparableField<MovieReview, Integer, Integer> TAG = DatastoreFields.createComparableField(
        Identifier.TAG,
        o -> OptionalUtil.unwrap(o.getTag()),
        MovieReview::setTag,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link MovieReview} field that can be
     * obtained using the {@link MovieReview#getUserId()} method.
     */
    ComparableField<MovieReview, Integer, Integer> USER_ID = DatastoreFields.createComparableField(
        Identifier.USER_ID,
        o -> OptionalUtil.unwrap(o.getUserId()),
        MovieReview::setUserId,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this MovieReview. The id field corresponds to the
     * database column movie_review.movie_review.movie_review.ID.
     * 
     * @return the id of this MovieReview
     */
    int getId();
    
    /**
     * Returns the movieId of this MovieReview. The movieId field corresponds to
     * the database column movie_review.movie_review.movie_review.Movie_id.
     * 
     * @return the movieId of this MovieReview
     */
    OptionalInt getMovieId();
    
    /**
     * Returns the content of this MovieReview. The content field corresponds to
     * the database column movie_review.movie_review.movie_review.Content.
     * 
     * @return the content of this MovieReview
     */
    Optional<String> getContent();
    
    /**
     * Returns the tag of this MovieReview. The tag field corresponds to the
     * database column movie_review.movie_review.movie_review.Tag.
     * 
     * @return the tag of this MovieReview
     */
    OptionalInt getTag();
    
    /**
     * Returns the userId of this MovieReview. The userId field corresponds to
     * the database column movie_review.movie_review.movie_review.User_id.
     * 
     * @return the userId of this MovieReview
     */
    OptionalInt getUserId();
    
    /**
     * Sets the id of this MovieReview. The id field corresponds to the database
     * column movie_review.movie_review.movie_review.ID.
     * 
     * @param id to set of this MovieReview
     * @return   this MovieReview instance
     */
    MovieReview setId(int id);
    
    /**
     * Sets the movieId of this MovieReview. The movieId field corresponds to
     * the database column movie_review.movie_review.movie_review.Movie_id.
     * 
     * @param movieId to set of this MovieReview
     * @return        this MovieReview instance
     */
    MovieReview setMovieId(Integer movieId);
    
    /**
     * Sets the content of this MovieReview. The content field corresponds to
     * the database column movie_review.movie_review.movie_review.Content.
     * 
     * @param content to set of this MovieReview
     * @return        this MovieReview instance
     */
    MovieReview setContent(String content);
    
    /**
     * Sets the tag of this MovieReview. The tag field corresponds to the
     * database column movie_review.movie_review.movie_review.Tag.
     * 
     * @param tag to set of this MovieReview
     * @return    this MovieReview instance
     */
    MovieReview setTag(Integer tag);
    
    /**
     * Sets the userId of this MovieReview. The userId field corresponds to the
     * database column movie_review.movie_review.movie_review.User_id.
     * 
     * @param userId to set of this MovieReview
     * @return       this MovieReview instance
     */
    MovieReview setUserId(Integer userId);
    
    enum Identifier implements ColumnIdentifier<MovieReview> {
        
        ID       ("ID"),
        MOVIE_ID ("Movie_id"),
        CONTENT  ("Content"),
        TAG      ("Tag"),
        USER_ID  ("User_id");
        
        private final String columnId;
        private final TableIdentifier<MovieReview> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "movie_review";
        }
        
        @Override
        public String getSchemaId() {
            return "movie_review";
        }
        
        @Override
        public String getTableId() {
            return "movie_review";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<MovieReview> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}