package com.company.movie_review.movie_review.movie_review.movie.generated;

import com.company.movie_review.movie_review.movie_review.movie.Movie;
import com.company.movie_review.movie_review.movie_review.movie.MovieImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.function.BiLongToIntFunction;
import com.speedment.common.function.LongToBooleanFunction;
import com.speedment.common.function.LongToByteFunction;
import com.speedment.common.function.LongToCharFunction;
import com.speedment.common.function.LongToFloatFunction;
import com.speedment.common.function.LongToShortFunction;
import com.speedment.enterprise.common.bytebuffercommon.ByteBufferUtil;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreSerializer;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreComparator;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStoreCompareTo;
import com.speedment.enterprise.datastore.runtime.entitystore.function.EntityStorePredicate;
import com.speedment.enterprise.datastore.runtime.internal.throwable.Utf8Exception;
import com.speedment.enterprise.datastore.runtime.throwable.DeserializationException;
import com.speedment.enterprise.datastore.runtime.util.SerializerUtil;
import com.speedment.enterprise.datastore.runtime.util.Utf8Util;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

import java.nio.ByteBuffer;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.LongConsumer;
import java.util.function.LongFunction;
import java.util.function.LongPredicate;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongUnaryOperator;

import static java.util.Collections.singletonList;
import static java.util.Objects.requireNonNull;

/**
 * Serializes and deserializes instances of Movie.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMovieEntityStoreSerializerImpl implements EntityStoreSerializer<Movie> {
    
    private final LongFunction<ByteBuffer> bufferFinder;
    private final LongToIntFunction offsetFinder;
    private final static int FIELD_ID = 0;
    private final static int ENDPOS_MOVIE_NAME = 4;
    private final static int ENDPOS_MOVIE_CATEGORY = 8;
    private final static int ENDPOS_MOVIE_DESCRIPTION = 12;
    private final static int ENDPOS_MOVIE_DIRECTOR = 16;
    private final static int ENDPOS_MOVIE_DURATION = 20;
    private final static int ENDPOS_MOVIE_RATING = 24;
    private final static int ENDPOS_MOVIE_IMAGE = 28;
    private final static int VARSIZE_BEGINS = 32;
    
    protected GeneratedMovieEntityStoreSerializerImpl(final LongFunction<ByteBuffer> bufferFinder, final LongToIntFunction offsetFinder) {
        this.bufferFinder = requireNonNull(bufferFinder);
        this.offsetFinder = requireNonNull(offsetFinder);
    }
    
    @Override
    public BiConsumer<ByteBuffer, Movie> serializer() {
        return (buffer, entity) -> {
            int varSizePos = 0;
            buffer.putInt(FIELD_ID, entity.getId());
            if (entity.getMovieName().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getMovieName().get().getBytes());
                buffer.putInt(ENDPOS_MOVIE_NAME, varSizePos);
            } else {
                buffer.putInt(ENDPOS_MOVIE_NAME, (0x80000000 | varSizePos));
            }
            if (entity.getMovieCategory().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getMovieCategory().get().getBytes());
                buffer.putInt(ENDPOS_MOVIE_CATEGORY, varSizePos);
            } else {
                buffer.putInt(ENDPOS_MOVIE_CATEGORY, (0x80000000 | varSizePos));
            }
            if (entity.getMovieDescription().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getMovieDescription().get().getBytes());
                buffer.putInt(ENDPOS_MOVIE_DESCRIPTION, varSizePos);
            } else {
                buffer.putInt(ENDPOS_MOVIE_DESCRIPTION, (0x80000000 | varSizePos));
            }
            if (entity.getMovieDirector().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getMovieDirector().get().getBytes());
                buffer.putInt(ENDPOS_MOVIE_DIRECTOR, varSizePos);
            } else {
                buffer.putInt(ENDPOS_MOVIE_DIRECTOR, (0x80000000 | varSizePos));
            }
            if (entity.getMovieDuration().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getMovieDuration().get().getBytes());
                buffer.putInt(ENDPOS_MOVIE_DURATION, varSizePos);
            } else {
                buffer.putInt(ENDPOS_MOVIE_DURATION, (0x80000000 | varSizePos));
            }
            if (entity.getMovieRating().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getMovieRating().get().getBytes());
                buffer.putInt(ENDPOS_MOVIE_RATING, varSizePos);
            } else {
                buffer.putInt(ENDPOS_MOVIE_RATING, (0x80000000 | varSizePos));
            }
            if (entity.getMovieImage().isPresent()) {
                varSizePos += ByteBufferUtil.putArrayAbsolute(buffer, VARSIZE_BEGINS + varSizePos, entity.getMovieImage().get().getBytes());
                buffer.putInt(ENDPOS_MOVIE_IMAGE, varSizePos);
            } else {
                buffer.putInt(ENDPOS_MOVIE_IMAGE, (0x80000000 | varSizePos));
            }
            buffer.position(0);
            buffer.limit(VARSIZE_BEGINS + varSizePos);
        };
    }
    
    @Override
    public LongConsumer decorator(DataStoreHolder holder) {
        return DO_NOTHING;
    }
    
    @Override
    public LongFunction<Movie> deserializer() {
        return ref -> {
            final ByteBuffer buffer = bufferFinder.apply(ref);
            final int offset = offsetFinder.applyAsInt(ref);
            final Movie entity = new MovieImpl();
            entity.setId(buffer.getInt(offset + FIELD_ID));
            if (buffer.getInt(offset + ENDPOS_MOVIE_NAME) >= 0) {
                try {
                    entity.setMovieName(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + 0,
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_NAME)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            if (buffer.getInt(offset + ENDPOS_MOVIE_CATEGORY) >= 0) {
                try {
                    entity.setMovieCategory(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES)),
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_CATEGORY)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            if (buffer.getInt(offset + ENDPOS_MOVIE_DESCRIPTION) >= 0) {
                try {
                    entity.setMovieDescription(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES)),
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_DESCRIPTION)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            if (buffer.getInt(offset + ENDPOS_MOVIE_DIRECTOR) >= 0) {
                try {
                    entity.setMovieDirector(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES)),
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_DIRECTOR)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            if (buffer.getInt(offset + ENDPOS_MOVIE_DURATION) >= 0) {
                try {
                    entity.setMovieDuration(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_DURATION - Integer.BYTES)),
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_DURATION)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            if (buffer.getInt(offset + ENDPOS_MOVIE_RATING) >= 0) {
                try {
                    entity.setMovieRating(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_RATING - Integer.BYTES)),
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_RATING)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            if (buffer.getInt(offset + ENDPOS_MOVIE_IMAGE) >= 0) {
                try {
                    entity.setMovieImage(Utf8Util.deserialize(buffer,
                        offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_IMAGE - Integer.BYTES)),
                        offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_IMAGE)
                    ));
                } catch (final Utf8Exception ex) {
                    final LongToIntFunction sizeOf = sizeOf();
                    throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                }
            }
            return entity;
        };
    }
    
    @Override
    public Class<?> deserializedType(final ColumnIdentifier<Movie> colId) {
        if (colId instanceof Movie.Identifier) {
            final Movie.Identifier _id = (Movie.Identifier) colId;
            switch (_id) {
                case ID                : return int.class;
                case MOVIE_NAME        : 
                case MOVIE_CATEGORY    : 
                case MOVIE_DESCRIPTION : 
                case MOVIE_DIRECTOR    : 
                case MOVIE_DURATION    : 
                case MOVIE_RATING      : 
                case MOVIE_IMAGE       : return String.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "ID"                : return int.class;
                case "Movie_name"        : 
                case "Movie_category"    : 
                case "Movie_description" : 
                case "Movie_director"    : 
                case "Movie_duration"    : 
                case "Movie_rating"      : 
                case "Movie_image"       : return String.class;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final ColumnIdentifier<Movie> colId, final ColumnIdentifier<FK_ENTITY> fkColId) {
        return finder(singletonList(colId), singletonList(fkColId));
    }
    
    @Override
    public <FK_ENTITY> LongUnaryOperator finder(final List<ColumnIdentifier<Movie>> cols, final List<ColumnIdentifier<FK_ENTITY>> fkCols) {
        throw new UnsupportedOperationException("Movie has no foreign references.");
    }
    
    @Override
    public LongUnaryOperator finder(final String fkName) {
        throw new UnsupportedOperationException("Movie has no foreign references.");
    }
    
    @Override
    public LongPredicate isNull(final ColumnIdentifier<Movie> colId) {
        if (colId instanceof Movie.Identifier) {
            final Movie.Identifier _id = (Movie.Identifier) colId;
            switch (_id) {
                case ID                : return ALWAYS_FALSE;
                case MOVIE_NAME        : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_NAME) < 0;
                case MOVIE_CATEGORY    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_CATEGORY) < 0;
                case MOVIE_DESCRIPTION : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_DESCRIPTION) < 0;
                case MOVIE_DIRECTOR    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_DIRECTOR) < 0;
                case MOVIE_DURATION    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_DURATION) < 0;
                case MOVIE_RATING      : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_RATING) < 0;
                case MOVIE_IMAGE       : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_IMAGE) < 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "ID"                : return ALWAYS_FALSE;
                case "Movie_name"        : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_NAME) < 0;
                case "Movie_category"    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_CATEGORY) < 0;
                case "Movie_description" : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_DESCRIPTION) < 0;
                case "Movie_director"    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_DIRECTOR) < 0;
                case "Movie_duration"    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_DURATION) < 0;
                case "Movie_rating"      : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_RATING) < 0;
                case "Movie_image"       : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_IMAGE) < 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate isPresent(final ColumnIdentifier<Movie> colId) {
        if (colId instanceof Movie.Identifier) {
            final Movie.Identifier _id = (Movie.Identifier) colId;
            switch (_id) {
                case ID                : return ALWAYS_TRUE;
                case MOVIE_NAME        : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_NAME) >= 0;
                case MOVIE_CATEGORY    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_CATEGORY) >= 0;
                case MOVIE_DESCRIPTION : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_DESCRIPTION) >= 0;
                case MOVIE_DIRECTOR    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_DIRECTOR) >= 0;
                case MOVIE_DURATION    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_DURATION) >= 0;
                case MOVIE_RATING      : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_RATING) >= 0;
                case MOVIE_IMAGE       : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_IMAGE) >= 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "ID"                : return ALWAYS_TRUE;
                case "Movie_name"        : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_NAME) >= 0;
                case "Movie_category"    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_CATEGORY) >= 0;
                case "Movie_description" : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_DESCRIPTION) >= 0;
                case "Movie_director"    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_DIRECTOR) >= 0;
                case "Movie_duration"    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_DURATION) >= 0;
                case "Movie_rating"      : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_RATING) >= 0;
                case "Movie_image"       : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_IMAGE) >= 0;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToByteFunction byteDeserializer(final ColumnIdentifier<Movie> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToShortFunction shortDeserializer(final ColumnIdentifier<Movie> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction intDeserializer(final ColumnIdentifier<Movie> colId) {
        if ("ID".equals(colId.getColumnId())) {
            return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_ID);
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type int.", colId.getColumnId())
        );
    }
    
    @Override
    public LongUnaryOperator longDeserializer(final ColumnIdentifier<Movie> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToFloatFunction floatDeserializer(final ColumnIdentifier<Movie> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToDoubleFunction doubleDeserializer(final ColumnIdentifier<Movie> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToCharFunction charDeserializer(final ColumnIdentifier<Movie> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToBooleanFunction booleanDeserializer(final ColumnIdentifier<Movie> colId) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongFunction<?> objectDeserializer(final ColumnIdentifier<Movie> colId) {
        if (colId instanceof Movie.Identifier) {
            final Movie.Identifier _id = (Movie.Identifier) colId;
            switch (_id) {
                case MOVIE_NAME        : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + 0,
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_NAME)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case MOVIE_CATEGORY    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_CATEGORY)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case MOVIE_DESCRIPTION : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_DESCRIPTION)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case MOVIE_DIRECTOR    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_DIRECTOR)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case MOVIE_DURATION    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_DURATION - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_DURATION)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case MOVIE_RATING      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_RATING - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_RATING)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case MOVIE_IMAGE       : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_IMAGE - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_IMAGE)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "Movie_name"        : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + 0,
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_NAME)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case "Movie_category"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_CATEGORY)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case "Movie_description" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_DESCRIPTION)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case "Movie_director"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_DIRECTOR)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case "Movie_duration"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_DURATION - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_DURATION)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case "Movie_rating"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_RATING - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_RATING)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                case "Movie_image"       : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int offset = offsetFinder.applyAsInt(ref);
                    try {
                        return Utf8Util.deserialize(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_IMAGE - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_IMAGE)
                        );
                    } catch (final Utf8Exception ex) {
                        final LongToIntFunction sizeOf = sizeOf();
                        throw new DeserializationException(buffer, offset, sizeOf.applyAsInt(ref), ex);
                    }
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparator(final ColumnIdentifier<Movie> colId) {
        if (colId instanceof Movie.Identifier) {
            final Movie.Identifier _id = (Movie.Identifier) colId;
            switch (_id) {
                case ID                : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_ID)
                );
                case MOVIE_NAME        : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + 0;
                    final int bStarts = bOffset + VARSIZE_BEGINS + 0;
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_MOVIE_NAME);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_MOVIE_NAME);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case MOVIE_CATEGORY    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_MOVIE_CATEGORY);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_MOVIE_CATEGORY);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case MOVIE_DESCRIPTION : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_MOVIE_DESCRIPTION);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_MOVIE_DESCRIPTION);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case MOVIE_DIRECTOR    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_MOVIE_DIRECTOR);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_MOVIE_DIRECTOR);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case MOVIE_DURATION    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_DURATION - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_DURATION - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_MOVIE_DURATION);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_MOVIE_DURATION);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case MOVIE_RATING      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_RATING - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_RATING - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_MOVIE_RATING);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_MOVIE_RATING);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case MOVIE_IMAGE       : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_IMAGE - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_IMAGE - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_MOVIE_IMAGE);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_MOVIE_IMAGE);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "ID"                : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_ID)
                );
                case "Movie_name"        : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + 0;
                    final int bStarts = bOffset + VARSIZE_BEGINS + 0;
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_MOVIE_NAME);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_MOVIE_NAME);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case "Movie_category"    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_MOVIE_CATEGORY);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_MOVIE_CATEGORY);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case "Movie_description" : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_MOVIE_DESCRIPTION);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_MOVIE_DESCRIPTION);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case "Movie_director"    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_MOVIE_DIRECTOR);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_MOVIE_DIRECTOR);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case "Movie_duration"    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_DURATION - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_DURATION - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_MOVIE_DURATION);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_MOVIE_DURATION);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case "Movie_rating"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_RATING - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_RATING - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_MOVIE_RATING);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_MOVIE_RATING);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                case "Movie_image"       : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_IMAGE - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_IMAGE - Integer.BYTES));
                    final int aEnds   = aOffset + VARSIZE_BEGINS + aBuf.getInt(aOffset + ENDPOS_MOVIE_IMAGE);
                    final int bEnds   = bOffset + VARSIZE_BEGINS + bBuf.getInt(bOffset + ENDPOS_MOVIE_IMAGE);
                    return ByteBufferUtil.compare(
                        aBuf, aStarts, aEnds,
                        bBuf, bStarts, bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction comparatorNullsLast(final ColumnIdentifier<Movie> colId) {
        if (colId instanceof Movie.Identifier) {
            final Movie.Identifier _id = (Movie.Identifier) colId;
            switch (_id) {
                case ID                : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_ID)
                );
                case MOVIE_NAME        : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + 0;
                    final int bStarts = bOffset + VARSIZE_BEGINS + 0;
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_MOVIE_NAME);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_MOVIE_NAME);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case MOVIE_CATEGORY    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_MOVIE_CATEGORY);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_MOVIE_CATEGORY);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case MOVIE_DESCRIPTION : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_MOVIE_DESCRIPTION);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_MOVIE_DESCRIPTION);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case MOVIE_DIRECTOR    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_MOVIE_DIRECTOR);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_MOVIE_DIRECTOR);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case MOVIE_DURATION    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_DURATION - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_DURATION - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_MOVIE_DURATION);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_MOVIE_DURATION);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case MOVIE_RATING      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_RATING - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_RATING - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_MOVIE_RATING);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_MOVIE_RATING);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case MOVIE_IMAGE       : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_IMAGE - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_IMAGE - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_MOVIE_IMAGE);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_MOVIE_IMAGE);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "ID"                : return (aRef, bRef) -> Integer.compare(
                    bufferFinder.apply(aRef).getInt(offsetFinder.applyAsInt(aRef) + FIELD_ID),
                    bufferFinder.apply(bRef).getInt(offsetFinder.applyAsInt(bRef) + FIELD_ID)
                );
                case "Movie_name"        : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + 0;
                    final int bStarts = bOffset + VARSIZE_BEGINS + 0;
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_MOVIE_NAME);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_MOVIE_NAME);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case "Movie_category"    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_MOVIE_CATEGORY);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_MOVIE_CATEGORY);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case "Movie_description" : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_MOVIE_DESCRIPTION);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_MOVIE_DESCRIPTION);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case "Movie_director"    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_MOVIE_DIRECTOR);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_MOVIE_DIRECTOR);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case "Movie_duration"    : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_DURATION - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_DURATION - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_MOVIE_DURATION);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_MOVIE_DURATION);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case "Movie_rating"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_RATING - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_RATING - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_MOVIE_RATING);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_MOVIE_RATING);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                case "Movie_image"       : return (aRef, bRef) -> {
                    final ByteBuffer aBuf = bufferFinder.apply(aRef);
                    final ByteBuffer bBuf = bufferFinder.apply(bRef);
                    final int aOffset = offsetFinder.applyAsInt(aRef);
                    final int bOffset = offsetFinder.applyAsInt(bRef);
                    final int aStarts = aOffset + VARSIZE_BEGINS + (0x7fffffff & aBuf.getInt(aOffset + ENDPOS_MOVIE_IMAGE - Integer.BYTES));
                    final int bStarts = bOffset + VARSIZE_BEGINS + (0x7fffffff & bBuf.getInt(bOffset + ENDPOS_MOVIE_IMAGE - Integer.BYTES));
                    final int aEnds   = aBuf.getInt(aOffset + ENDPOS_MOVIE_IMAGE);
                    final int bEnds   = bBuf.getInt(bOffset + ENDPOS_MOVIE_IMAGE);
                    if (aEnds < 0 && bEnds < 0) return 0;
                    else if (aEnds < 0) return 1;
                    else if (bEnds < 0) return -1;
                    else return ByteBufferUtil.compare(
                        aBuf, aStarts, aOffset + VARSIZE_BEGINS + aEnds,
                        bBuf, bStarts, bOffset + VARSIZE_BEGINS + bEnds
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToByte(final ColumnIdentifier<Movie> colId, final byte value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type byte.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToShort(final ColumnIdentifier<Movie> colId, final short value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type short.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToInt(final ColumnIdentifier<Movie> colId, final int value) {
        if ("ID".equals(colId.getColumnId())) {
            {
                final int operand = value;
                return ref -> Integer.compare(
                    bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + FIELD_ID),
                    operand
                );
            }
        }
        
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type int.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToLong(final ColumnIdentifier<Movie> colId, final long value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type long.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToFloat(final ColumnIdentifier<Movie> colId, final float value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type float.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToDouble(final ColumnIdentifier<Movie> colId, final double value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type double.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToBoolean(final ColumnIdentifier<Movie> colId, final boolean value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type boolean.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToChar(final ColumnIdentifier<Movie> colId, final char value) {
        throw new UnsupportedOperationException(
            String.format("The column '%s' is either unknown or not of type char.", colId.getColumnId())
        );
    }
    
    @Override
    public LongToIntFunction compareToObject(final ColumnIdentifier<Movie> colId, final Object value) {
        if (colId instanceof Movie.Identifier) {
            final Movie.Identifier _id = (Movie.Identifier) colId;
            switch (_id) {
                case MOVIE_NAME        : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + 0,
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_NAME),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case MOVIE_CATEGORY    : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_CATEGORY),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case MOVIE_DESCRIPTION : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_DESCRIPTION),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case MOVIE_DIRECTOR    : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_DIRECTOR),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case MOVIE_DURATION    : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_DURATION - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_DURATION),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case MOVIE_RATING      : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_RATING - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_RATING),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case MOVIE_IMAGE       : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_IMAGE - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_IMAGE),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type object.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "Movie_name"        : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + 0,
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_NAME),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case "Movie_category"    : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_CATEGORY),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case "Movie_description" : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_DESCRIPTION),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case "Movie_director"    : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_DIRECTOR),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case "Movie_duration"    : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_DURATION - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_DURATION),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case "Movie_rating"      : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_RATING - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_RATING),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                case "Movie_image"       : {
                    final ByteBuffer tempBuffer = ByteBuffer.wrap(((String) value).getBytes());
                    final int tempSize = tempBuffer.capacity();
                    return ref -> {
                        final ByteBuffer buffer = bufferFinder.apply(ref);
                        final int offset = offsetFinder.applyAsInt(ref);
                        return ByteBufferUtil.compare(buffer,
                            offset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(offset + ENDPOS_MOVIE_IMAGE - Integer.BYTES)),
                            offset + VARSIZE_BEGINS + buffer.getInt(offset + ENDPOS_MOVIE_IMAGE),
                            tempBuffer, 0, tempSize
                        );
                    };
                }
                default : {
                    throw new UnsupportedOperationException(
                        String.format("The column '%s' is either unknown or not of type object.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction compareToNull(final ColumnIdentifier<Movie> colId) {
        if (colId instanceof Movie.Identifier) {
            final Movie.Identifier _id = (Movie.Identifier) colId;
            switch (_id) {
                case ID                : return ALWAYS_LESS;
                case MOVIE_NAME        : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_NAME) < 0 ? 0 : -1;
                case MOVIE_CATEGORY    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_CATEGORY) < 0 ? 0 : -1;
                case MOVIE_DESCRIPTION : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_DESCRIPTION) < 0 ? 0 : -1;
                case MOVIE_DIRECTOR    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_DIRECTOR) < 0 ? 0 : -1;
                case MOVIE_DURATION    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_DURATION) < 0 ? 0 : -1;
                case MOVIE_RATING      : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_RATING) < 0 ? 0 : -1;
                case MOVIE_IMAGE       : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_IMAGE) < 0 ? 0 : -1;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "ID"                : return ALWAYS_LESS;
                case "Movie_name"        : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_NAME) < 0 ? 0 : -1;
                case "Movie_category"    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_CATEGORY) < 0 ? 0 : -1;
                case "Movie_description" : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_DESCRIPTION) < 0 ? 0 : -1;
                case "Movie_director"    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_DIRECTOR) < 0 ? 0 : -1;
                case "Movie_duration"    : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_DURATION) < 0 ? 0 : -1;
                case "Movie_rating"      : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_RATING) < 0 ? 0 : -1;
                case "Movie_image"       : return ref -> bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_IMAGE) < 0 ? 0 : -1;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongPredicate newPredicate(final ColumnIdentifier<Movie> colId, final EntityStorePredicate predicate) {
        if (colId instanceof Movie.Identifier) {
            final Movie.Identifier _id = (Movie.Identifier) colId;
            switch (_id) {
                case ID                : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case MOVIE_NAME        : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_NAME)
                    );
                };
                case MOVIE_CATEGORY    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_CATEGORY)
                    );
                };
                case MOVIE_DESCRIPTION : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_DESCRIPTION)
                    );
                };
                case MOVIE_DIRECTOR    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_DIRECTOR)
                    );
                };
                case MOVIE_DURATION    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_DURATION - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_DURATION)
                    );
                };
                case MOVIE_RATING      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_RATING - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_RATING)
                    );
                };
                case MOVIE_IMAGE       : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_IMAGE - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_IMAGE)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "ID"                : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ID;
                    return predicate.test(buffer, begins, begins + Integer.BYTES);
                };
                case "Movie_name"        : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_NAME)
                    );
                };
                case "Movie_category"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_CATEGORY)
                    );
                };
                case "Movie_description" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_DESCRIPTION)
                    );
                };
                case "Movie_director"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_DIRECTOR)
                    );
                };
                case "Movie_duration"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_DURATION - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_DURATION)
                    );
                };
                case "Movie_rating"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_RATING - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_RATING)
                    );
                };
                case "Movie_image"       : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return predicate.test(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_IMAGE - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_IMAGE)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction newCompareTo(final ColumnIdentifier<Movie> colId, final EntityStoreCompareTo compareTo) {
        if (colId instanceof Movie.Identifier) {
            final Movie.Identifier _id = (Movie.Identifier) colId;
            switch (_id) {
                case ID                : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case MOVIE_NAME        : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_NAME)
                    );
                };
                case MOVIE_CATEGORY    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_CATEGORY)
                    );
                };
                case MOVIE_DESCRIPTION : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_DESCRIPTION)
                    );
                };
                case MOVIE_DIRECTOR    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_DIRECTOR)
                    );
                };
                case MOVIE_DURATION    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_DURATION - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_DURATION)
                    );
                };
                case MOVIE_RATING      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_RATING - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_RATING)
                    );
                };
                case MOVIE_IMAGE       : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_IMAGE - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_IMAGE)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "ID"                : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    final int begins = rowOffset + FIELD_ID;
                    return compareTo.compare(buffer, begins, begins + Integer.BYTES);
                };
                case "Movie_name"        : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS,
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_NAME)
                    );
                };
                case "Movie_category"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_CATEGORY)
                    );
                };
                case "Movie_description" : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_DESCRIPTION)
                    );
                };
                case "Movie_director"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_DIRECTOR)
                    );
                };
                case "Movie_duration"    : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_DURATION - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_DURATION)
                    );
                };
                case "Movie_rating"      : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_RATING - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_RATING)
                    );
                };
                case "Movie_image"       : return ref -> {
                    final ByteBuffer buffer = bufferFinder.apply(ref);
                    final int rowOffset = offsetFinder.applyAsInt(ref);
                    return compareTo.compare(buffer,
                        rowOffset + VARSIZE_BEGINS + (0x7fffffff & buffer.getInt(rowOffset + ENDPOS_MOVIE_IMAGE - Integer.BYTES)),
                        rowOffset + VARSIZE_BEGINS + buffer.getInt(rowOffset + ENDPOS_MOVIE_IMAGE)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public BiLongToIntFunction newComparator(final ColumnIdentifier<Movie> colId, final EntityStoreComparator comparator) {
        if (colId instanceof Movie.Identifier) {
            final Movie.Identifier _id = (Movie.Identifier) colId;
            switch (_id) {
                case ID                : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_ID;
                    final int bBegins = bRowOffset + FIELD_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case MOVIE_NAME        : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_NAME), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_NAME)
                    );
                };
                case MOVIE_CATEGORY    : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_CATEGORY), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_CATEGORY)
                    );
                };
                case MOVIE_DESCRIPTION : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_DESCRIPTION), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_DESCRIPTION)
                    );
                };
                case MOVIE_DIRECTOR    : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_DIRECTOR), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_DIRECTOR)
                    );
                };
                case MOVIE_DURATION    : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_DURATION - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_DURATION), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_DURATION - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_DURATION)
                    );
                };
                case MOVIE_RATING      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_RATING - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_RATING), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_RATING - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_RATING)
                    );
                };
                case MOVIE_IMAGE       : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_IMAGE - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_IMAGE), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_IMAGE - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_IMAGE)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = colId.getColumnId();
            switch (_colName) {
                case "ID"                : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    final int aBegins = aRowOffset + FIELD_ID;
                    final int bBegins = bRowOffset + FIELD_ID;
                    return comparator.compare(
                        aBuffer, aBegins, aBegins + Integer.BYTES,
                        bBuffer, bBegins, bBegins + Integer.BYTES
                    );
                };
                case "Movie_name"        : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS, aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_NAME), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS, bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_NAME)
                    );
                };
                case "Movie_category"    : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_CATEGORY), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_CATEGORY - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_CATEGORY)
                    );
                };
                case "Movie_description" : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_DESCRIPTION), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_DESCRIPTION - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_DESCRIPTION)
                    );
                };
                case "Movie_director"    : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_DIRECTOR), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_DIRECTOR - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_DIRECTOR)
                    );
                };
                case "Movie_duration"    : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_DURATION - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_DURATION), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_DURATION - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_DURATION)
                    );
                };
                case "Movie_rating"      : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_RATING - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_RATING), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_RATING - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_RATING)
                    );
                };
                case "Movie_image"       : return (aRef, bRef) -> {
                    final ByteBuffer aBuffer = bufferFinder.apply(aRef);
                    final ByteBuffer bBuffer = bufferFinder.apply(bRef);
                    final int aRowOffset = offsetFinder.applyAsInt(aRef);
                    final int bRowOffset = offsetFinder.applyAsInt(bRef);
                    return comparator.compare(
                        aBuffer, aRowOffset + VARSIZE_BEGINS + (0x7fffffff & aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_IMAGE - Integer.BYTES)), aRowOffset + VARSIZE_BEGINS + aBuffer.getInt(aRowOffset + ENDPOS_MOVIE_IMAGE), 
                        bBuffer, bRowOffset + VARSIZE_BEGINS + (0x7fffffff & bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_IMAGE - Integer.BYTES)), bRowOffset + VARSIZE_BEGINS + bBuffer.getInt(bRowOffset + ENDPOS_MOVIE_IMAGE)
                    );
                };
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public LongToIntFunction sizeOf() {
        return ref -> VARSIZE_BEGINS + Math.abs(bufferFinder.apply(ref).getInt(offsetFinder.applyAsInt(ref) + ENDPOS_MOVIE_IMAGE));
    }
}