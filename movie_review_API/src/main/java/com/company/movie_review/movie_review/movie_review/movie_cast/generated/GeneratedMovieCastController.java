package com.company.movie_review.movie_review.movie_review.movie_cast.generated;

import com.company.movie_review.movie_review.movie_review.movie_cast.MovieCast;
import com.company.movie_review.movie_review.movie_review.movie_cast.MovieCastManager;
import com.company.movie_review.movie_review.movie_review.movie_cast.generated.GeneratedMovieCast.Identifier;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.json.Json;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.field.Field;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.Comparator;
import java.util.EnumSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for MovieCast entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
public abstract class GeneratedMovieCastController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired MovieCastManager manager;
    protected JsonEncoder<MovieCast> encoder;
    
    @PostConstruct
    void createMovieCastEncoder() {
        encoder = jsonComponent.<MovieCast>emptyEncoder()
            .put("id", MovieCast.ID)
            .put("movieId", MovieCast.MOVIE_ID)
            .put("castId", MovieCast.CAST_ID)
            .put("roleName", MovieCast.ROLE_NAME)
            .build();
    }
    
    @GetMapping(path = "/movie_cast", produces = "application/json")
    public String get(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return getHelper(
            ControllerUtil.parseFilters(filters, MovieCastFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, MovieCastSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    protected final Set<Identifier> parseColumns(String jsonColumnList) {
        try {
            @SuppressWarnings("unchecked")
            final List<String> parsed = (List<String>) Json.fromJson(jsonColumnList);
            final Set<GeneratedMovieCast.Identifier> result = EnumSet.noneOf(GeneratedMovieCast.Identifier.class);
            parsed.stream().map(this::parseColumn).forEach(result::add);
            return result;
        } catch (final ClassCastException ex) {
            throw new IllegalArgumentException("Error in parsed JSON.");
        }
    }
    
    protected final Identifier parseColumn(String jsonColumn) {
        switch (jsonColumn) {
            case "id":       return GeneratedMovieCast.Identifier.ID;
            case "movieId":  return GeneratedMovieCast.Identifier.MOVIE_ID;
            case "castId":   return GeneratedMovieCast.Identifier.CAST_ID;
            case "roleName": return GeneratedMovieCast.Identifier.ROLE_NAME;
            default: throw new IllegalArgumentException(
                "Unknown column '" + jsonColumn + "'."
            );
        }
    }
    
    protected final Field<MovieCast> fieldOf(Identifier columnId) {
        switch (columnId) {
            case ID:        return MovieCast.ID;
            case MOVIE_ID:  return MovieCast.MOVIE_ID;
            case CAST_ID:   return MovieCast.CAST_ID;
            case ROLE_NAME: return MovieCast.ROLE_NAME;
            default: throw new IllegalArgumentException(
                "Unknown column '" + columnId + "'."
            );
        }
    }
    
    protected String getHelper(
            List<Predicate<MovieCast>> predicates,
            List<Comparator<MovieCast>> sorters,
            long start,
            long limit) {
        Stream<MovieCast> stream = manager.stream();
        
        for (final Predicate<MovieCast> predicate : predicates) {
            stream = stream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<MovieCast>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        return stream
            .skip(start)
            .limit(limit)
            .collect(JsonCollectors.toList(encoder));
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public final static class MovieCastFilter extends AbstractFilter<MovieCast> {
        
        public MovieCastFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<MovieCast> toPredicate() {
            switch (property()) {
                case "id" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return MovieCast.ID.equal(v);
                        case "ne"   : return MovieCast.ID.notEqual(v);
                        case "lt"   : return MovieCast.ID.lessThan(v);
                        case "le"   : return MovieCast.ID.lessOrEqual(v);
                        case "gt"   : return MovieCast.ID.greaterThan(v);
                        case "ge"   : return MovieCast.ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "MovieCast.id."
                        );
                    }
                }
                case "movieId" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return MovieCast.MOVIE_ID.equal(v);
                        case "ne"   : return MovieCast.MOVIE_ID.notEqual(v);
                        case "lt"   : return MovieCast.MOVIE_ID.lessThan(v);
                        case "le"   : return MovieCast.MOVIE_ID.lessOrEqual(v);
                        case "gt"   : return MovieCast.MOVIE_ID.greaterThan(v);
                        case "ge"   : return MovieCast.MOVIE_ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "MovieCast.movieId."
                        );
                    }
                }
                case "castId" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return MovieCast.CAST_ID.equal(v);
                        case "ne"   : return MovieCast.CAST_ID.notEqual(v);
                        case "lt"   : return MovieCast.CAST_ID.lessThan(v);
                        case "le"   : return MovieCast.CAST_ID.lessOrEqual(v);
                        case "gt"   : return MovieCast.CAST_ID.greaterThan(v);
                        case "ge"   : return MovieCast.CAST_ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "MovieCast.castId."
                        );
                    }
                }
                case "roleName" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return MovieCast.ROLE_NAME.equal(v);
                        case "ne"   : return MovieCast.ROLE_NAME.notEqual(v);
                        case "lt"   : return MovieCast.ROLE_NAME.lessThan(v);
                        case "le"   : return MovieCast.ROLE_NAME.lessOrEqual(v);
                        case "gt"   : return MovieCast.ROLE_NAME.greaterThan(v);
                        case "ge"   : return MovieCast.ROLE_NAME.greaterOrEqual(v);
                        case "like" : return MovieCast.ROLE_NAME.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "MovieCast.roleName."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid MovieCast property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public final static class MovieCastSort extends AbstractSort<MovieCast> {
        
        public MovieCastSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<MovieCast> toComparator() {
            final Comparator<MovieCast> comparator;
            switch (property()) {
                case "id"       : comparator = MovieCast.ID.comparator();        break;
                case "movieId"  : comparator = MovieCast.MOVIE_ID.comparator();  break;
                case "castId"   : comparator = MovieCast.CAST_ID.comparator();   break;
                case "roleName" : comparator = MovieCast.ROLE_NAME.comparator(); break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid MovieCast property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
}