package com.company.movie_review.movie_review.movie_review.cast.generated;

import com.company.movie_review.movie_review.movie_review.cast.Cast;
import com.company.movie_review.movie_review.movie_review.cast.CastEntityStoreSerializerImpl;
import com.company.movie_review.movie_review.movie_review.cast.CastManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfComparable;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfInt;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.sql.Date;
import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * CastManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedCastCacheHolder implements EntityStoreHolder<Cast> {
    
    private final EntityStore<Cast> entityStore;
    private final OfInt fieldIdCache;
    private final OfString fieldCastNameCache;
    private final OfInt fieldCastGenderCache;
    private final OfString fieldCastImageCache;
    private final OfString fieldCastDescriptionCache;
    private final OfComparable<Date> fieldCastBirthdayCache;
    
    public GeneratedCastCacheHolder(
            EntityStore<Cast> entityStore,
            OfInt fieldIdCache,
            OfString fieldCastNameCache,
            OfInt fieldCastGenderCache,
            OfString fieldCastImageCache,
            OfString fieldCastDescriptionCache,
            OfComparable<Date> fieldCastBirthdayCache) {
        
        this.entityStore               = requireNonNull(entityStore);
        this.fieldIdCache              = requireNonNull(fieldIdCache);
        this.fieldCastNameCache        = requireNonNull(fieldCastNameCache);
        this.fieldCastGenderCache      = requireNonNull(fieldCastGenderCache);
        this.fieldCastImageCache       = requireNonNull(fieldCastImageCache);
        this.fieldCastDescriptionCache = requireNonNull(fieldCastDescriptionCache);
        this.fieldCastBirthdayCache    = requireNonNull(fieldCastBirthdayCache);
    }
    
    @Override
    public EntityStore<Cast> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<Cast> columnId) {
        if (columnId instanceof Cast.Identifier) {
            final Cast.Identifier _id = (Cast.Identifier) columnId;
            switch (_id) {
                case ID               : return (CACHE) fieldIdCache;
                case CAST_NAME        : return (CACHE) fieldCastNameCache;
                case CAST_GENDER      : return (CACHE) fieldCastGenderCache;
                case CAST_IMAGE       : return (CACHE) fieldCastImageCache;
                case CAST_DESCRIPTION : return (CACHE) fieldCastDescriptionCache;
                case CAST_BIRTHDAY    : return (CACHE) fieldCastBirthdayCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "ID"               : return (CACHE) fieldIdCache;
                case "Cast_name"        : return (CACHE) fieldCastNameCache;
                case "Cast_gender"      : return (CACHE) fieldCastGenderCache;
                case "Cast_image"       : return (CACHE) fieldCastImageCache;
                case "Cast_description" : return (CACHE) fieldCastDescriptionCache;
                case "Cast_birthday"    : return (CACHE) fieldCastBirthdayCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<Cast> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedCastCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            CastEntityStoreSerializerImpl::new,
            TableIdentifier.of("movie_review", "movie_review", "cast")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<Cast> recycleAndPersist(PersistOperation<Cast> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<Cast> recycleAndRemove(RemoveOperation<Cast> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<Cast> recycleAndUpdate(UpdateOperation<Cast> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<Cast> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<Cast>, FieldCache<?>>>of(
            Tuples.of(Cast.ID,              fieldIdCache),
            Tuples.of(Cast.CAST_NAME,       fieldCastNameCache),
            Tuples.of(Cast.CAST_GENDER,     fieldCastGenderCache),
            Tuples.of(Cast.CAST_IMAGE,      fieldCastImageCache),
            Tuples.of(Cast.CAST_DESCRIPTION,fieldCastDescriptionCache),
            Tuples.of(Cast.CAST_BIRTHDAY,   fieldCastBirthdayCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<Cast>> columnIdentifiers = Stream.<HasIdentifier<Cast>>of(
            Cast.ID,
            Cast.CAST_NAME,
            Cast.CAST_GENDER,
            Cast.CAST_IMAGE,
            Cast.CAST_DESCRIPTION,
            Cast.CAST_BIRTHDAY
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedCastCacheHolder> reload(CompletableFuture<EntityStore<Cast>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfInt> fieldIdCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Cast.ID, FieldCache.DISTINCT);
        
        final CompletableFuture<FieldCache.OfString> fieldCastNameCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Cast.CAST_NAME, 0);
        
        final CompletableFuture<FieldCache.OfInt> fieldCastGenderCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Cast.CAST_GENDER, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldCastImageCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Cast.CAST_IMAGE, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldCastDescriptionCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Cast.CAST_DESCRIPTION, 0);
        
        final CompletableFuture<FieldCache.OfComparable<Date>> fieldCastBirthdayCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, Cast.CAST_BIRTHDAY, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedCastCacheHolder(
                    entityStore,
                    fieldIdCacheFuture.get(),
                    fieldCastNameCacheFuture.get(),
                    fieldCastGenderCacheFuture.get(),
                    fieldCastImageCacheFuture.get(),
                    fieldCastDescriptionCacheFuture.get(),
                    fieldCastBirthdayCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldIdCache.close();
        fieldCastNameCache.close();
        fieldCastGenderCache.close();
        fieldCastImageCache.close();
        fieldCastDescriptionCache.close();
        fieldCastBirthdayCache.close();
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Arrays.asList(
                Cast.Identifier.ID,
                Cast.Identifier.CAST_NAME,
                Cast.Identifier.CAST_GENDER,
                Cast.Identifier.CAST_IMAGE,
                Cast.Identifier.CAST_DESCRIPTION,
                Cast.Identifier.CAST_BIRTHDAY
            )
        
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}