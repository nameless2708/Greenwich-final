package com.company.movie_review.movie_review.movie_review.movies.generated;

import com.company.movie_review.DTO.MovieDetail;
import com.company.movie_review.MovieReviewApplication;
import com.company.movie_review.MovieReviewApplicationBuilder;
import com.company.movie_review.movie_review.movie_review.cast.Cast;
import com.company.movie_review.movie_review.movie_review.cast.CastManager;
import com.company.movie_review.movie_review.movie_review.movie_cast.MovieCast;
import com.company.movie_review.movie_review.movie_review.movie_cast.MovieCastManager;
import com.company.movie_review.movie_review.movie_review.movies.Movies;
import com.company.movie_review.movie_review.movie_review.movies.MoviesManager;
import com.company.movie_review.movie_review.movie_review.movies.generated.GeneratedMovies.Identifier;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.json.Json;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.field.Field;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;

import java.sql.Timestamp;
import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;
import javax.validation.constraints.NotNull;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for Movies entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
public abstract class GeneratedMoviesController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired MoviesManager manager;
    protected JsonEncoder<Movies> encoder;
    
    @PostConstruct
    void createMoviesEncoder() {
        encoder = jsonComponent.<Movies>emptyEncoder()
            .put("id", Movies.ID)
            .put("posterPath", Movies.POSTER_PATH)
            .put("originalTitle", Movies.ORIGINAL_TITLE)
            .put("backdropPath", Movies.BACKDROP_PATH)
            .put("overview", Movies.OVERVIEW)
            .put("releaseDate", Movies.RELEASE_DATE)
            .put("director", Movies.DIRECTOR)
            .put("voteAverage", Movies.VOTE_AVERAGE)
            .build();
    }

    @CrossOrigin
    @GetMapping(path = "/movies/{id}", produces = "application/json")
    public Object findById(@PathVariable @NotNull int id){

        try{
            MovieReviewApplication app = new MovieReviewApplicationBuilder().withPassword("root").build();
            MoviesManager movies = app.getOrThrow(MoviesManager.class);
            MovieCastManager movie_cast = app.getOrThrow(MovieCastManager.class);
            CastManager cast = app.getOrThrow(CastManager.class);

            MovieDetail movieDetail = new MovieDetail();
            Object movieObj = movies.stream().filter(Movies.ID.equal(id)).findFirst();
            movieDetail.setMovies(movieObj);
            List<MovieCast> movieCastObj = movie_cast.stream().filter(MovieCast.MOVIE_ID.equal(id)).collect(toList());
            movieDetail.setMovie_cast(movieCastObj);
            List<Integer> movieCastIds = new ArrayList<>();
            movieCastObj.stream().forEach(element -> {
                movieCastIds.add(element.getId());
            });
            List<Cast> castObj = cast.stream().filter(Cast.ID.in(movieCastIds)).collect(toList());
            movieDetail.setCast(castObj);
            return movieDetail;
        }catch (Exception e){
            e.printStackTrace();
            return null;
        }
    }
    
    @GetMapping(path = "/movies", produces = "application/json")
    public String get(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return getHelper(
            ControllerUtil.parseFilters(filters, MoviesFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, MoviesSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    protected final Set<Identifier> parseColumns(String jsonColumnList) {
        try {
            @SuppressWarnings("unchecked")
            final List<String> parsed = (List<String>) Json.fromJson(jsonColumnList);
            final Set<GeneratedMovies.Identifier> result = EnumSet.noneOf(GeneratedMovies.Identifier.class);
            parsed.stream().map(this::parseColumn).forEach(result::add);
            return result;
        } catch (final ClassCastException ex) {
            throw new IllegalArgumentException("Error in parsed JSON.");
        }
    }
    
    protected final Identifier parseColumn(String jsonColumn) {
        switch (jsonColumn) {
            case "id":            return GeneratedMovies.Identifier.ID;
            case "posterPath":    return GeneratedMovies.Identifier.POSTER_PATH;
            case "originalTitle": return GeneratedMovies.Identifier.ORIGINAL_TITLE;
            case "backdropPath":  return GeneratedMovies.Identifier.BACKDROP_PATH;
            case "overview":      return GeneratedMovies.Identifier.OVERVIEW;
            case "releaseDate":   return GeneratedMovies.Identifier.RELEASE_DATE;
            case "director":      return GeneratedMovies.Identifier.DIRECTOR;
            case "voteAverage":   return GeneratedMovies.Identifier.VOTE_AVERAGE;
            default: throw new IllegalArgumentException(
                "Unknown column '" + jsonColumn + "'."
            );
        }
    }
    
    protected final Field<Movies> fieldOf(Identifier columnId) {
        switch (columnId) {
            case ID:             return Movies.ID;
            case POSTER_PATH:    return Movies.POSTER_PATH;
            case ORIGINAL_TITLE: return Movies.ORIGINAL_TITLE;
            case BACKDROP_PATH:  return Movies.BACKDROP_PATH;
            case OVERVIEW:       return Movies.OVERVIEW;
            case RELEASE_DATE:   return Movies.RELEASE_DATE;
            case DIRECTOR:       return Movies.DIRECTOR;
            case VOTE_AVERAGE:   return Movies.VOTE_AVERAGE;
            default: throw new IllegalArgumentException(
                "Unknown column '" + columnId + "'."
            );
        }
    }
    
    protected String getHelper(
            List<Predicate<Movies>> predicates,
            List<Comparator<Movies>> sorters,
            long start,
            long limit) {
        Stream<Movies> stream = manager.stream();
        
        for (final Predicate<Movies> predicate : predicates) {
            stream = stream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<Movies>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        return stream
            .skip(start)
            .limit(limit)
            .collect(JsonCollectors.toList(encoder));
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public final static class MoviesFilter extends AbstractFilter<Movies> {
        
        public MoviesFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<Movies> toPredicate() {
            switch (property()) {
                case "id" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Movies.ID.equal(v);
                        case "ne"   : return Movies.ID.notEqual(v);
                        case "lt"   : return Movies.ID.lessThan(v);
                        case "le"   : return Movies.ID.lessOrEqual(v);
                        case "gt"   : return Movies.ID.greaterThan(v);
                        case "ge"   : return Movies.ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movies.id."
                        );
                    }
                }
                case "posterPath" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Movies.POSTER_PATH.equal(v);
                        case "ne"   : return Movies.POSTER_PATH.notEqual(v);
                        case "lt"   : return Movies.POSTER_PATH.lessThan(v);
                        case "le"   : return Movies.POSTER_PATH.lessOrEqual(v);
                        case "gt"   : return Movies.POSTER_PATH.greaterThan(v);
                        case "ge"   : return Movies.POSTER_PATH.greaterOrEqual(v);
                        case "like" : return Movies.POSTER_PATH.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movies.posterPath."
                        );
                    }
                }
                case "originalTitle" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Movies.ORIGINAL_TITLE.equal(v);
                        case "ne"   : return Movies.ORIGINAL_TITLE.notEqual(v);
                        case "lt"   : return Movies.ORIGINAL_TITLE.lessThan(v);
                        case "le"   : return Movies.ORIGINAL_TITLE.lessOrEqual(v);
                        case "gt"   : return Movies.ORIGINAL_TITLE.greaterThan(v);
                        case "ge"   : return Movies.ORIGINAL_TITLE.greaterOrEqual(v);
                        case "like" : return Movies.ORIGINAL_TITLE.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movies.originalTitle."
                        );
                    }
                }
                case "backdropPath" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Movies.BACKDROP_PATH.equal(v);
                        case "ne"   : return Movies.BACKDROP_PATH.notEqual(v);
                        case "lt"   : return Movies.BACKDROP_PATH.lessThan(v);
                        case "le"   : return Movies.BACKDROP_PATH.lessOrEqual(v);
                        case "gt"   : return Movies.BACKDROP_PATH.greaterThan(v);
                        case "ge"   : return Movies.BACKDROP_PATH.greaterOrEqual(v);
                        case "like" : return Movies.BACKDROP_PATH.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movies.backdropPath."
                        );
                    }
                }
                case "overview" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Movies.OVERVIEW.equal(v);
                        case "ne"   : return Movies.OVERVIEW.notEqual(v);
                        case "lt"   : return Movies.OVERVIEW.lessThan(v);
                        case "le"   : return Movies.OVERVIEW.lessOrEqual(v);
                        case "gt"   : return Movies.OVERVIEW.greaterThan(v);
                        case "ge"   : return Movies.OVERVIEW.greaterOrEqual(v);
                        case "like" : return Movies.OVERVIEW.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movies.overview."
                        );
                    }
                }
                case "releaseDate" : {
                    final Timestamp v = Timestamp.valueOf(value());
                    switch (operator()) {
                        case "eq"   : return Movies.RELEASE_DATE.equal(v);
                        case "ne"   : return Movies.RELEASE_DATE.notEqual(v);
                        case "lt"   : return Movies.RELEASE_DATE.lessThan(v);
                        case "le"   : return Movies.RELEASE_DATE.lessOrEqual(v);
                        case "gt"   : return Movies.RELEASE_DATE.greaterThan(v);
                        case "ge"   : return Movies.RELEASE_DATE.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movies.releaseDate."
                        );
                    }
                }
                case "director" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Movies.DIRECTOR.equal(v);
                        case "ne"   : return Movies.DIRECTOR.notEqual(v);
                        case "lt"   : return Movies.DIRECTOR.lessThan(v);
                        case "le"   : return Movies.DIRECTOR.lessOrEqual(v);
                        case "gt"   : return Movies.DIRECTOR.greaterThan(v);
                        case "ge"   : return Movies.DIRECTOR.greaterOrEqual(v);
                        case "like" : return Movies.DIRECTOR.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movies.director."
                        );
                    }
                }
                case "voteAverage" : {
                    final Integer v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Movies.VOTE_AVERAGE.equal(v);
                        case "ne"   : return Movies.VOTE_AVERAGE.notEqual(v);
                        case "lt"   : return Movies.VOTE_AVERAGE.lessThan(v);
                        case "le"   : return Movies.VOTE_AVERAGE.lessOrEqual(v);
                        case "gt"   : return Movies.VOTE_AVERAGE.greaterThan(v);
                        case "ge"   : return Movies.VOTE_AVERAGE.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Movies.voteAverage."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Movies property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public final static class MoviesSort extends AbstractSort<Movies> {
        
        public MoviesSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<Movies> toComparator() {
            final Comparator<Movies> comparator;
            switch (property()) {
                case "id"            : comparator = Movies.ID.comparator();             break;
                case "posterPath"    : comparator = Movies.POSTER_PATH.comparator();    break;
                case "originalTitle" : comparator = Movies.ORIGINAL_TITLE.comparator(); break;
                case "backdropPath"  : comparator = Movies.BACKDROP_PATH.comparator();  break;
                case "overview"      : comparator = Movies.OVERVIEW.comparator();       break;
                case "releaseDate"   : comparator = Movies.RELEASE_DATE.comparator();   break;
                case "director"      : comparator = Movies.DIRECTOR.comparator();       break;
                case "voteAverage"   : comparator = Movies.VOTE_AVERAGE.comparator();   break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Movies property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
}