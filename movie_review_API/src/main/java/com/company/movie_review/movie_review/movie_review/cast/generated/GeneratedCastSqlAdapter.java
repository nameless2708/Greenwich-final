package com.company.movie_review.movie_review.movie_review.cast.generated;

import com.company.movie_review.movie_review.movie_review.cast.Cast;
import com.company.movie_review.movie_review.movie_review.cast.CastImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.company.movie_review.movie_review.movie_review.cast.Cast} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedCastSqlAdapter implements SqlAdapter<Cast> {
    
    private final TableIdentifier<Cast> tableIdentifier;
    
    protected GeneratedCastSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("movie_review", "movie_review", "cast");
    }
    
    protected Cast apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(              resultSet.getInt(1 + offset))
            .setCastName(        resultSet.getString(2 + offset))
            .setCastGender(      getInt(resultSet, 3 + offset))
            .setCastImage(       resultSet.getString(4 + offset))
            .setCastDescription( resultSet.getString(5 + offset))
            ;
    }
    
    protected CastImpl createEntity() {
        return new CastImpl();
    }
    
    @Override
    public TableIdentifier<Cast> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, Cast> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, Cast> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}