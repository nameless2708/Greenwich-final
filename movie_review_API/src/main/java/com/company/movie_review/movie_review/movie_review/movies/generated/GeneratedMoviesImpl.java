package com.company.movie_review.movie_review.movie_review.movies.generated;

import com.company.movie_review.movie_review.movie_review.movies.Movies;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;

import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.movie_review.movie_review.movie_review.movies.Movies}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMoviesImpl implements Movies {
    
    private int id;
    private String posterPath;
    private String originalTitle;
    private String backdropPath;
    private String overview;
    private Timestamp releaseDate;
    private String director;
    private Integer voteAverage;
    
    protected GeneratedMoviesImpl() {}
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public Optional<String> getPosterPath() {
        return Optional.ofNullable(posterPath);
    }
    
    @Override
    public Optional<String> getOriginalTitle() {
        return Optional.ofNullable(originalTitle);
    }
    
    @Override
    public Optional<String> getBackdropPath() {
        return Optional.ofNullable(backdropPath);
    }
    
    @Override
    public Optional<String> getOverview() {
        return Optional.ofNullable(overview);
    }
    
    @Override
    public Optional<Timestamp> getReleaseDate() {
        return Optional.ofNullable(releaseDate);
    }
    
    @Override
    public Optional<String> getDirector() {
        return Optional.ofNullable(director);
    }
    
    @Override
    public OptionalInt getVoteAverage() {
        return OptionalUtil.ofNullable(voteAverage);
    }
    
    @Override
    public Movies setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Movies setPosterPath(String posterPath) {
        this.posterPath = posterPath;
        return this;
    }
    
    @Override
    public Movies setOriginalTitle(String originalTitle) {
        this.originalTitle = originalTitle;
        return this;
    }
    
    @Override
    public Movies setBackdropPath(String backdropPath) {
        this.backdropPath = backdropPath;
        return this;
    }
    
    @Override
    public Movies setOverview(String overview) {
        this.overview = overview;
        return this;
    }
    
    @Override
    public Movies setReleaseDate(Timestamp releaseDate) {
        this.releaseDate = releaseDate;
        return this;
    }
    
    @Override
    public Movies setDirector(String director) {
        this.director = director;
        return this;
    }
    
    @Override
    public Movies setVoteAverage(Integer voteAverage) {
        this.voteAverage = voteAverage;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "            + Objects.toString(getId()));
        sj.add("posterPath = "    + Objects.toString(OptionalUtil.unwrap(getPosterPath())));
        sj.add("originalTitle = " + Objects.toString(OptionalUtil.unwrap(getOriginalTitle())));
        sj.add("backdropPath = "  + Objects.toString(OptionalUtil.unwrap(getBackdropPath())));
        sj.add("overview = "      + Objects.toString(OptionalUtil.unwrap(getOverview())));
        sj.add("releaseDate = "   + Objects.toString(OptionalUtil.unwrap(getReleaseDate())));
        sj.add("director = "      + Objects.toString(OptionalUtil.unwrap(getDirector())));
        sj.add("voteAverage = "   + Objects.toString(OptionalUtil.unwrap(getVoteAverage())));
        return "MoviesImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Movies)) { return false; }
        final Movies thatMovies = (Movies)that;
        if (this.getId() != thatMovies.getId()) { return false; }
        if (!Objects.equals(this.getPosterPath(), thatMovies.getPosterPath())) { return false; }
        if (!Objects.equals(this.getOriginalTitle(), thatMovies.getOriginalTitle())) { return false; }
        if (!Objects.equals(this.getBackdropPath(), thatMovies.getBackdropPath())) { return false; }
        if (!Objects.equals(this.getOverview(), thatMovies.getOverview())) { return false; }
        if (!Objects.equals(this.getReleaseDate(), thatMovies.getReleaseDate())) { return false; }
        if (!Objects.equals(this.getDirector(), thatMovies.getDirector())) { return false; }
        if (!Objects.equals(this.getVoteAverage(), thatMovies.getVoteAverage())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPosterPath()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getOriginalTitle()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getBackdropPath()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getOverview()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getReleaseDate()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getDirector()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getVoteAverage()));
        return hash;
    }
}