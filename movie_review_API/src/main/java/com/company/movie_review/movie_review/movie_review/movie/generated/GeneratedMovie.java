package com.company.movie_review.movie_review.movie_review.movie.generated;

import com.company.movie_review.movie_review.movie_review.movie.Movie;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;

/**
 * The generated base for the {@link
 * com.company.movie_review.movie_review.movie_review.movie.Movie}-interface
 * representing entities of the {@code movie}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedMovie {
    
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getId()} method.
     */
    IntField<Movie, Integer> ID = DatastoreFields.createIntField(
        Identifier.ID,
        Movie::getId,
        Movie::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getMovieName()} method.
     */
    StringField<Movie, String> MOVIE_NAME = DatastoreFields.createStringField(
        Identifier.MOVIE_NAME,
        o -> OptionalUtil.unwrap(o.getMovieName()),
        Movie::setMovieName,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getMovieCategory()} method.
     */
    StringField<Movie, String> MOVIE_CATEGORY = DatastoreFields.createStringField(
        Identifier.MOVIE_CATEGORY,
        o -> OptionalUtil.unwrap(o.getMovieCategory()),
        Movie::setMovieCategory,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getMovieDescription()} method.
     */
    StringField<Movie, String> MOVIE_DESCRIPTION = DatastoreFields.createStringField(
        Identifier.MOVIE_DESCRIPTION,
        o -> OptionalUtil.unwrap(o.getMovieDescription()),
        Movie::setMovieDescription,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getMovieDirector()} method.
     */
    StringField<Movie, String> MOVIE_DIRECTOR = DatastoreFields.createStringField(
        Identifier.MOVIE_DIRECTOR,
        o -> OptionalUtil.unwrap(o.getMovieDirector()),
        Movie::setMovieDirector,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getMovieDuration()} method.
     */
    StringField<Movie, String> MOVIE_DURATION = DatastoreFields.createStringField(
        Identifier.MOVIE_DURATION,
        o -> OptionalUtil.unwrap(o.getMovieDuration()),
        Movie::setMovieDuration,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getMovieRating()} method.
     */
    StringField<Movie, String> MOVIE_RATING = DatastoreFields.createStringField(
        Identifier.MOVIE_RATING,
        o -> OptionalUtil.unwrap(o.getMovieRating()),
        Movie::setMovieRating,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Movie} field that can be obtained
     * using the {@link Movie#getMovieImage()} method.
     */
    StringField<Movie, String> MOVIE_IMAGE = DatastoreFields.createStringField(
        Identifier.MOVIE_IMAGE,
        o -> OptionalUtil.unwrap(o.getMovieImage()),
        Movie::setMovieImage,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Movie. The id field corresponds to the database
     * column movie_review.movie_review.movie.ID.
     * 
     * @return the id of this Movie
     */
    int getId();
    
    /**
     * Returns the movieName of this Movie. The movieName field corresponds to
     * the database column movie_review.movie_review.movie.Movie_name.
     * 
     * @return the movieName of this Movie
     */
    Optional<String> getMovieName();
    
    /**
     * Returns the movieCategory of this Movie. The movieCategory field
     * corresponds to the database column
     * movie_review.movie_review.movie.Movie_category.
     * 
     * @return the movieCategory of this Movie
     */
    Optional<String> getMovieCategory();
    
    /**
     * Returns the movieDescription of this Movie. The movieDescription field
     * corresponds to the database column
     * movie_review.movie_review.movie.Movie_description.
     * 
     * @return the movieDescription of this Movie
     */
    Optional<String> getMovieDescription();
    
    /**
     * Returns the movieDirector of this Movie. The movieDirector field
     * corresponds to the database column
     * movie_review.movie_review.movie.Movie_director.
     * 
     * @return the movieDirector of this Movie
     */
    Optional<String> getMovieDirector();
    
    /**
     * Returns the movieDuration of this Movie. The movieDuration field
     * corresponds to the database column
     * movie_review.movie_review.movie.Movie_duration.
     * 
     * @return the movieDuration of this Movie
     */
    Optional<String> getMovieDuration();
    
    /**
     * Returns the movieRating of this Movie. The movieRating field corresponds
     * to the database column movie_review.movie_review.movie.Movie_rating.
     * 
     * @return the movieRating of this Movie
     */
    Optional<String> getMovieRating();
    
    /**
     * Returns the movieImage of this Movie. The movieImage field corresponds to
     * the database column movie_review.movie_review.movie.Movie_image.
     * 
     * @return the movieImage of this Movie
     */
    Optional<String> getMovieImage();
    
    /**
     * Sets the id of this Movie. The id field corresponds to the database
     * column movie_review.movie_review.movie.ID.
     * 
     * @param id to set of this Movie
     * @return   this Movie instance
     */
    Movie setId(int id);
    
    /**
     * Sets the movieName of this Movie. The movieName field corresponds to the
     * database column movie_review.movie_review.movie.Movie_name.
     * 
     * @param movieName to set of this Movie
     * @return          this Movie instance
     */
    Movie setMovieName(String movieName);
    
    /**
     * Sets the movieCategory of this Movie. The movieCategory field corresponds
     * to the database column movie_review.movie_review.movie.Movie_category.
     * 
     * @param movieCategory to set of this Movie
     * @return              this Movie instance
     */
    Movie setMovieCategory(String movieCategory);
    
    /**
     * Sets the movieDescription of this Movie. The movieDescription field
     * corresponds to the database column
     * movie_review.movie_review.movie.Movie_description.
     * 
     * @param movieDescription to set of this Movie
     * @return                 this Movie instance
     */
    Movie setMovieDescription(String movieDescription);
    
    /**
     * Sets the movieDirector of this Movie. The movieDirector field corresponds
     * to the database column movie_review.movie_review.movie.Movie_director.
     * 
     * @param movieDirector to set of this Movie
     * @return              this Movie instance
     */
    Movie setMovieDirector(String movieDirector);
    
    /**
     * Sets the movieDuration of this Movie. The movieDuration field corresponds
     * to the database column movie_review.movie_review.movie.Movie_duration.
     * 
     * @param movieDuration to set of this Movie
     * @return              this Movie instance
     */
    Movie setMovieDuration(String movieDuration);
    
    /**
     * Sets the movieRating of this Movie. The movieRating field corresponds to
     * the database column movie_review.movie_review.movie.Movie_rating.
     * 
     * @param movieRating to set of this Movie
     * @return            this Movie instance
     */
    Movie setMovieRating(String movieRating);
    
    /**
     * Sets the movieImage of this Movie. The movieImage field corresponds to
     * the database column movie_review.movie_review.movie.Movie_image.
     * 
     * @param movieImage to set of this Movie
     * @return           this Movie instance
     */
    Movie setMovieImage(String movieImage);
    
    enum Identifier implements ColumnIdentifier<Movie> {
        
        ID                ("ID"),
        MOVIE_NAME        ("Movie_name"),
        MOVIE_CATEGORY    ("Movie_category"),
        MOVIE_DESCRIPTION ("Movie_description"),
        MOVIE_DIRECTOR    ("Movie_director"),
        MOVIE_DURATION    ("Movie_duration"),
        MOVIE_RATING      ("Movie_rating"),
        MOVIE_IMAGE       ("Movie_image");
        
        private final String columnId;
        private final TableIdentifier<Movie> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "movie_review";
        }
        
        @Override
        public String getSchemaId() {
            return "movie_review";
        }
        
        @Override
        public String getTableId() {
            return "movie";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Movie> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}