package com.company.movie_review.movie_review.movie_review.movie_review.generated;

import com.company.movie_review.movie_review.movie_review.movie_review.MovieReview;
import com.company.movie_review.movie_review.movie_review.movie_review.MovieReviewEntityStoreSerializerImpl;
import com.company.movie_review.movie_review.movie_review.movie_review.MovieReviewManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfComparable;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfInt;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * MovieReviewManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedMovieReviewCacheHolder implements EntityStoreHolder<MovieReview> {
    
    private final EntityStore<MovieReview> entityStore;
    private final OfInt fieldIdCache;
    private final OfInt fieldMovieIdCache;
    private final OfString fieldContentCache;
    private final OfInt fieldTagCache;
    private final OfInt fieldUserIdCache;
    private final OfComparable<Timestamp> fieldCreateDateCache;
    private final OfInt fieldRatingCache;
    
    public GeneratedMovieReviewCacheHolder(
            EntityStore<MovieReview> entityStore,
            OfInt fieldIdCache,
            OfInt fieldMovieIdCache,
            OfString fieldContentCache,
            OfInt fieldTagCache,
            OfInt fieldUserIdCache,
            OfComparable<Timestamp> fieldCreateDateCache,
            OfInt fieldRatingCache) {
        
        this.entityStore          = requireNonNull(entityStore);
        this.fieldIdCache         = requireNonNull(fieldIdCache);
        this.fieldMovieIdCache    = requireNonNull(fieldMovieIdCache);
        this.fieldContentCache    = requireNonNull(fieldContentCache);
        this.fieldTagCache        = requireNonNull(fieldTagCache);
        this.fieldUserIdCache     = requireNonNull(fieldUserIdCache);
        this.fieldCreateDateCache = requireNonNull(fieldCreateDateCache);
        this.fieldRatingCache     = requireNonNull(fieldRatingCache);
    }
    
    @Override
    public EntityStore<MovieReview> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<MovieReview> columnId) {
        if (columnId instanceof MovieReview.Identifier) {
            final MovieReview.Identifier _id = (MovieReview.Identifier) columnId;
            switch (_id) {
                case ID          : return (CACHE) fieldIdCache;
                case MOVIE_ID    : return (CACHE) fieldMovieIdCache;
                case CONTENT     : return (CACHE) fieldContentCache;
                case TAG         : return (CACHE) fieldTagCache;
                case USER_ID     : return (CACHE) fieldUserIdCache;
                case CREATE_DATE : return (CACHE) fieldCreateDateCache;
                case RATING      : return (CACHE) fieldRatingCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "ID"          : return (CACHE) fieldIdCache;
                case "Movie_id"    : return (CACHE) fieldMovieIdCache;
                case "Content"     : return (CACHE) fieldContentCache;
                case "Tag"         : return (CACHE) fieldTagCache;
                case "User_id"     : return (CACHE) fieldUserIdCache;
                case "Create_date" : return (CACHE) fieldCreateDateCache;
                case "Rating"      : return (CACHE) fieldRatingCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<MovieReview> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedMovieReviewCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            MovieReviewEntityStoreSerializerImpl::new,
            TableIdentifier.of("movie_review", "movie_review", "movie_review")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<MovieReview> recycleAndPersist(PersistOperation<MovieReview> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<MovieReview> recycleAndRemove(RemoveOperation<MovieReview> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<MovieReview> recycleAndUpdate(UpdateOperation<MovieReview> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<MovieReview> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<MovieReview>, FieldCache<?>>>of(
            Tuples.of(MovieReview.ID,         fieldIdCache),
            Tuples.of(MovieReview.MOVIE_ID,   fieldMovieIdCache),
            Tuples.of(MovieReview.CONTENT,    fieldContentCache),
            Tuples.of(MovieReview.TAG,        fieldTagCache),
            Tuples.of(MovieReview.USER_ID,    fieldUserIdCache),
            Tuples.of(MovieReview.CREATE_DATE,fieldCreateDateCache),
            Tuples.of(MovieReview.RATING,     fieldRatingCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<MovieReview>> columnIdentifiers = Stream.<HasIdentifier<MovieReview>>of(
            MovieReview.ID,
            MovieReview.MOVIE_ID,
            MovieReview.CONTENT,
            MovieReview.TAG,
            MovieReview.USER_ID,
            MovieReview.CREATE_DATE,
            MovieReview.RATING
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedMovieReviewCacheHolder> reload(CompletableFuture<EntityStore<MovieReview>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfInt> fieldIdCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, MovieReview.ID, FieldCache.DISTINCT);
        
        final CompletableFuture<FieldCache.OfInt> fieldMovieIdCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, MovieReview.MOVIE_ID, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldContentCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, MovieReview.CONTENT, 0);
        
        final CompletableFuture<FieldCache.OfInt> fieldTagCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, MovieReview.TAG, 0);
        
        final CompletableFuture<FieldCache.OfInt> fieldUserIdCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, MovieReview.USER_ID, 0);
        
        final CompletableFuture<FieldCache.OfComparable<Timestamp>> fieldCreateDateCacheFuture =
            DataStoreHolderUtil.buildComparableCache(entityStoreFuture, executor, MovieReview.CREATE_DATE, 0);
        
        final CompletableFuture<FieldCache.OfInt> fieldRatingCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, MovieReview.RATING, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedMovieReviewCacheHolder(
                    entityStore,
                    fieldIdCacheFuture.get(),
                    fieldMovieIdCacheFuture.get(),
                    fieldContentCacheFuture.get(),
                    fieldTagCacheFuture.get(),
                    fieldUserIdCacheFuture.get(),
                    fieldCreateDateCacheFuture.get(),
                    fieldRatingCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldIdCache.close();
        fieldMovieIdCache.close();
        fieldContentCache.close();
        fieldTagCache.close();
        fieldUserIdCache.close();
        fieldCreateDateCache.close();
        fieldRatingCache.close();
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Arrays.asList(
                MovieReview.Identifier.ID,
                MovieReview.Identifier.MOVIE_ID,
                MovieReview.Identifier.CONTENT,
                MovieReview.Identifier.TAG,
                MovieReview.Identifier.USER_ID,
                MovieReview.Identifier.CREATE_DATE,
                MovieReview.Identifier.RATING
            )
        
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}