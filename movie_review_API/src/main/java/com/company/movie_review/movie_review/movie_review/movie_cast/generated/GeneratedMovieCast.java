package com.company.movie_review.movie_review.movie_review.movie_cast.generated;

import com.company.movie_review.movie_review.movie_review.movie_cast.MovieCast;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.company.movie_review.movie_review.movie_review.movie_cast.MovieCast}-interface
 * representing entities of the {@code movie_cast}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedMovieCast {
    
    /**
     * This Field corresponds to the {@link MovieCast} field that can be
     * obtained using the {@link MovieCast#getId()} method.
     */
    IntField<MovieCast, Integer> ID = DatastoreFields.createIntField(
        Identifier.ID,
        MovieCast::getId,
        MovieCast::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link MovieCast} field that can be
     * obtained using the {@link MovieCast#getMovieId()} method.
     */
    ComparableField<MovieCast, Integer, Integer> MOVIE_ID = DatastoreFields.createComparableField(
        Identifier.MOVIE_ID,
        o -> OptionalUtil.unwrap(o.getMovieId()),
        MovieCast::setMovieId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link MovieCast} field that can be
     * obtained using the {@link MovieCast#getCastId()} method.
     */
    ComparableField<MovieCast, Integer, Integer> CAST_ID = DatastoreFields.createComparableField(
        Identifier.CAST_ID,
        o -> OptionalUtil.unwrap(o.getCastId()),
        MovieCast::setCastId,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link MovieCast} field that can be
     * obtained using the {@link MovieCast#getRoleName()} method.
     */
    StringField<MovieCast, String> ROLE_NAME = DatastoreFields.createStringField(
        Identifier.ROLE_NAME,
        o -> OptionalUtil.unwrap(o.getRoleName()),
        MovieCast::setRoleName,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this MovieCast. The id field corresponds to the
     * database column movie_review.movie_review.movie_cast.ID.
     * 
     * @return the id of this MovieCast
     */
    int getId();
    
    /**
     * Returns the movieId of this MovieCast. The movieId field corresponds to
     * the database column movie_review.movie_review.movie_cast.Movie_id.
     * 
     * @return the movieId of this MovieCast
     */
    OptionalInt getMovieId();
    
    /**
     * Returns the castId of this MovieCast. The castId field corresponds to the
     * database column movie_review.movie_review.movie_cast.Cast_id.
     * 
     * @return the castId of this MovieCast
     */
    OptionalInt getCastId();
    
    /**
     * Returns the roleName of this MovieCast. The roleName field corresponds to
     * the database column movie_review.movie_review.movie_cast.Role_name.
     * 
     * @return the roleName of this MovieCast
     */
    Optional<String> getRoleName();
    
    /**
     * Sets the id of this MovieCast. The id field corresponds to the database
     * column movie_review.movie_review.movie_cast.ID.
     * 
     * @param id to set of this MovieCast
     * @return   this MovieCast instance
     */
    MovieCast setId(int id);
    
    /**
     * Sets the movieId of this MovieCast. The movieId field corresponds to the
     * database column movie_review.movie_review.movie_cast.Movie_id.
     * 
     * @param movieId to set of this MovieCast
     * @return        this MovieCast instance
     */
    MovieCast setMovieId(Integer movieId);
    
    /**
     * Sets the castId of this MovieCast. The castId field corresponds to the
     * database column movie_review.movie_review.movie_cast.Cast_id.
     * 
     * @param castId to set of this MovieCast
     * @return       this MovieCast instance
     */
    MovieCast setCastId(Integer castId);
    
    /**
     * Sets the roleName of this MovieCast. The roleName field corresponds to
     * the database column movie_review.movie_review.movie_cast.Role_name.
     * 
     * @param roleName to set of this MovieCast
     * @return         this MovieCast instance
     */
    MovieCast setRoleName(String roleName);
    
    enum Identifier implements ColumnIdentifier<MovieCast> {
        
        ID        ("ID"),
        MOVIE_ID  ("Movie_id"),
        CAST_ID   ("Cast_id"),
        ROLE_NAME ("Role_name");
        
        private final String columnId;
        private final TableIdentifier<MovieCast> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "movie_review";
        }
        
        @Override
        public String getSchemaId() {
            return "movie_review";
        }
        
        @Override
        public String getTableId() {
            return "movie_cast";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<MovieCast> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}