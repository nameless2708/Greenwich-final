package com.company.movie_review.movie_review.movie_review.movie.generated;

import com.company.movie_review.movie_review.movie_review.movie.Movie;
import com.company.movie_review.movie_review.movie_review.movie.MovieEntityStoreSerializerImpl;
import com.company.movie_review.movie_review.movie_review.movie.MovieManager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.tuple.Tuple2;
import com.speedment.common.tuple.Tuples;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfInt;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache.OfString;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.DataStoreHolderUtil;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.bulk.PersistOperation;
import com.speedment.runtime.bulk.RemoveOperation;
import com.speedment.runtime.bulk.UpdateOperation;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.ColumnLabel;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.StreamSupplierComponent;
import com.speedment.runtime.field.Field;
import com.speedment.runtime.field.trait.HasIdentifier;

import java.util.Arrays;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;

/**
 * A holder class for the various caches that are used to speed up the {@link
 * MovieManager}.
 * 
 * Generated by
 * com.speedment.enterprise.datastore.generator.internal.code.GeneratedEntityCacheHolderTranslator
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedMovieCacheHolder implements EntityStoreHolder<Movie> {
    
    private final EntityStore<Movie> entityStore;
    private final OfInt fieldIdCache;
    private final OfString fieldMovieNameCache;
    private final OfString fieldMovieCategoryCache;
    private final OfString fieldMovieDescriptionCache;
    private final OfString fieldMovieDirectorCache;
    private final OfString fieldMovieDurationCache;
    private final OfString fieldMovieRatingCache;
    private final OfString fieldMovieImageCache;
    
    public GeneratedMovieCacheHolder(
            EntityStore<Movie> entityStore,
            OfInt fieldIdCache,
            OfString fieldMovieNameCache,
            OfString fieldMovieCategoryCache,
            OfString fieldMovieDescriptionCache,
            OfString fieldMovieDirectorCache,
            OfString fieldMovieDurationCache,
            OfString fieldMovieRatingCache,
            OfString fieldMovieImageCache) {
        
        this.entityStore                = requireNonNull(entityStore);
        this.fieldIdCache               = requireNonNull(fieldIdCache);
        this.fieldMovieNameCache        = requireNonNull(fieldMovieNameCache);
        this.fieldMovieCategoryCache    = requireNonNull(fieldMovieCategoryCache);
        this.fieldMovieDescriptionCache = requireNonNull(fieldMovieDescriptionCache);
        this.fieldMovieDirectorCache    = requireNonNull(fieldMovieDirectorCache);
        this.fieldMovieDurationCache    = requireNonNull(fieldMovieDurationCache);
        this.fieldMovieRatingCache      = requireNonNull(fieldMovieRatingCache);
        this.fieldMovieImageCache       = requireNonNull(fieldMovieImageCache);
    }
    
    @Override
    public EntityStore<Movie> getEntityStore() {
        return entityStore;
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<Movie> columnId) {
        if (columnId instanceof Movie.Identifier) {
            final Movie.Identifier _id = (Movie.Identifier) columnId;
            switch (_id) {
                case ID                : return (CACHE) fieldIdCache;
                case MOVIE_NAME        : return (CACHE) fieldMovieNameCache;
                case MOVIE_CATEGORY    : return (CACHE) fieldMovieCategoryCache;
                case MOVIE_DESCRIPTION : return (CACHE) fieldMovieDescriptionCache;
                case MOVIE_DIRECTOR    : return (CACHE) fieldMovieDirectorCache;
                case MOVIE_DURATION    : return (CACHE) fieldMovieDurationCache;
                case MOVIE_RATING      : return (CACHE) fieldMovieRatingCache;
                case MOVIE_IMAGE       : return (CACHE) fieldMovieImageCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown enum constant '%s'.", _id)
                    );
                }
            }
        } else {
            final String _colName = columnId.getColumnId();
            switch (_colName) {
                case "ID"                : return (CACHE) fieldIdCache;
                case "Movie_name"        : return (CACHE) fieldMovieNameCache;
                case "Movie_category"    : return (CACHE) fieldMovieCategoryCache;
                case "Movie_description" : return (CACHE) fieldMovieDescriptionCache;
                case "Movie_director"    : return (CACHE) fieldMovieDirectorCache;
                case "Movie_duration"    : return (CACHE) fieldMovieDurationCache;
                case "Movie_rating"      : return (CACHE) fieldMovieRatingCache;
                case "Movie_image"       : return (CACHE) fieldMovieImageCache;
                default : {
                    throw new UnsupportedOperationException(
                        String.format("Unknown column name '%s'.", _colName)
                    );
                }
            }
        }
    }
    
    @Override
    public boolean isHavingMultiFieldCache(ColumnIdentifier<Movie> columnId) {
        return false;
    }
    
    public static CompletableFuture<GeneratedMovieCacheHolder> reload(StreamSupplierComponent streamSupplier, ExecutorService executor) {
        return reload(DataStoreHolderUtil.buildEntityStore(
            streamSupplier,
            executor,
            MovieEntityStoreSerializerImpl::new,
            TableIdentifier.of("movie_review", "movie_review", "movie")
        ), executor);
    }
    
    @Override
    public EntityStoreHolder<Movie> recycleAndPersist(PersistOperation<Movie> persistOperation) {
        return wrapped().recycleAndPersist(persistOperation);
    }
    
    @Override
    public EntityStoreHolder<Movie> recycleAndRemove(RemoveOperation<Movie> removeOperation) {
        return wrapped().recycleAndRemove(removeOperation);
    }
    
    @Override
    public EntityStoreHolder<Movie> recycleAndUpdate(UpdateOperation<Movie> updateOperation) {
        return wrapped().recycleAndUpdate(updateOperation);
    }
    
    private EntityStoreHolder<Movie> wrapped() {
        // Use explicit type for Stream to improve compilation time.
        final Map<ColumnLabel, FieldCache<?>> fieldCaches = Stream.<Tuple2<HasIdentifier<Movie>, FieldCache<?>>>of(
            Tuples.of(Movie.ID,               fieldIdCache),
            Tuples.of(Movie.MOVIE_NAME,       fieldMovieNameCache),
            Tuples.of(Movie.MOVIE_CATEGORY,   fieldMovieCategoryCache),
            Tuples.of(Movie.MOVIE_DESCRIPTION,fieldMovieDescriptionCache),
            Tuples.of(Movie.MOVIE_DIRECTOR,   fieldMovieDirectorCache),
            Tuples.of(Movie.MOVIE_DURATION,   fieldMovieDurationCache),
            Tuples.of(Movie.MOVIE_RATING,     fieldMovieRatingCache),
            Tuples.of(Movie.MOVIE_IMAGE,      fieldMovieImageCache)
        )
            .collect(toMap(t2 -> t2.get0().identifier().label(), Tuple2::get1));
        final Map<ColumnLabel,  Map<ColumnLabel, MultiFieldCache<?, ?, ?>>>  multiFieldCaches = createMultiCacheMap();
        final Set<ColumnIdentifier<Movie>> columnIdentifiers = Stream.<HasIdentifier<Movie>>of(
            Movie.ID,
            Movie.MOVIE_NAME,
            Movie.MOVIE_CATEGORY,
            Movie.MOVIE_DESCRIPTION,
            Movie.MOVIE_DIRECTOR,
            Movie.MOVIE_DURATION,
            Movie.MOVIE_RATING,
            Movie.MOVIE_IMAGE
        )
            .map(HasIdentifier::identifier)
            .collect(toSet());
        return EntityStoreHolder.of(
            entityStore,
            fieldCaches,
            multiFieldCaches,
            columnIdentifiers
        );
    }
    
    public static CompletableFuture<GeneratedMovieCacheHolder> reload(CompletableFuture<EntityStore<Movie>> entityStoreFuture, ExecutorService executor) {
        final CompletableFuture<FieldCache.OfInt> fieldIdCacheFuture =
            DataStoreHolderUtil.buildIntCache(entityStoreFuture, executor, Movie.ID, FieldCache.DISTINCT);
        
        final CompletableFuture<FieldCache.OfString> fieldMovieNameCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Movie.MOVIE_NAME, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldMovieCategoryCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Movie.MOVIE_CATEGORY, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldMovieDescriptionCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Movie.MOVIE_DESCRIPTION, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldMovieDirectorCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Movie.MOVIE_DIRECTOR, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldMovieDurationCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Movie.MOVIE_DURATION, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldMovieRatingCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Movie.MOVIE_RATING, 0);
        
        final CompletableFuture<FieldCache.OfString> fieldMovieImageCacheFuture =
            DataStoreHolderUtil.buildStringCache(entityStoreFuture, executor, Movie.MOVIE_IMAGE, 0);
        
        return entityStoreFuture.thenApplyAsync(entityStore -> {
            try {
                return new GeneratedMovieCacheHolder(
                    entityStore,
                    fieldIdCacheFuture.get(),
                    fieldMovieNameCacheFuture.get(),
                    fieldMovieCategoryCacheFuture.get(),
                    fieldMovieDescriptionCacheFuture.get(),
                    fieldMovieDirectorCacheFuture.get(),
                    fieldMovieDurationCacheFuture.get(),
                    fieldMovieRatingCacheFuture.get(),
                    fieldMovieImageCacheFuture.get()
                );
            } catch (final ExecutionException | InterruptedException ex) {
                throw new RuntimeException(ex);
            }
        });
    }
    
    @Override
    public void close() {
        entityStore.close();
        fieldIdCache.close();
        fieldMovieNameCache.close();
        fieldMovieCategoryCache.close();
        fieldMovieDescriptionCache.close();
        fieldMovieDirectorCache.close();
        fieldMovieDurationCache.close();
        fieldMovieRatingCache.close();
        fieldMovieImageCache.close();
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.getStatistics(    
            this,
            entityStore.identifier(),
            Arrays.asList(
                Movie.Identifier.ID,
                Movie.Identifier.MOVIE_NAME,
                Movie.Identifier.MOVIE_CATEGORY,
                Movie.Identifier.MOVIE_DESCRIPTION,
                Movie.Identifier.MOVIE_DIRECTOR,
                Movie.Identifier.MOVIE_DURATION,
                Movie.Identifier.MOVIE_RATING,
                Movie.Identifier.MOVIE_IMAGE
            )
        
        );
    }
    
    private Map<ColumnLabel, Map<ColumnLabel, MultiFieldCache<?, ?, ?>>> createMultiCacheMap() {
        return Collections.emptyMap();
    }
}