package com.company.movie_review.movie_review.movie_review.user.generated;

import com.company.movie_review.movie_review.movie_review.user.User;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.field.DatastoreFields;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;

/**
 * The generated base for the {@link
 * com.company.movie_review.movie_review.movie_review.user.User}-interface
 * representing entities of the {@code user}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedUser {
    
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getId()} method.
     */
    IntField<User, Integer> ID = DatastoreFields.createIntField(
        Identifier.ID,
        User::getId,
        User::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getUsername()} method.
     */
    StringField<User, String> USERNAME = DatastoreFields.createStringField(
        Identifier.USERNAME,
        o -> OptionalUtil.unwrap(o.getUsername()),
        User::setUsername,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getPassword()} method.
     */
    StringField<User, String> PASSWORD = DatastoreFields.createStringField(
        Identifier.PASSWORD,
        o -> OptionalUtil.unwrap(o.getPassword()),
        User::setPassword,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getEmail()} method.
     */
    StringField<User, String> EMAIL = DatastoreFields.createStringField(
        Identifier.EMAIL,
        o -> OptionalUtil.unwrap(o.getEmail()),
        User::setEmail,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getPhone()} method.
     */
    StringField<User, String> PHONE = DatastoreFields.createStringField(
        Identifier.PHONE,
        o -> OptionalUtil.unwrap(o.getPhone()),
        User::setPhone,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getFullname()} method.
     */
    StringField<User, String> FULLNAME = DatastoreFields.createStringField(
        Identifier.FULLNAME,
        o -> OptionalUtil.unwrap(o.getFullname()),
        User::setFullname,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getAddress()} method.
     */
    StringField<User, String> ADDRESS = DatastoreFields.createStringField(
        Identifier.ADDRESS,
        o -> OptionalUtil.unwrap(o.getAddress()),
        User::setAddress,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this User. The id field corresponds to the database
     * column movie_review.movie_review.user.ID.
     * 
     * @return the id of this User
     */
    int getId();
    
    /**
     * Returns the username of this User. The username field corresponds to the
     * database column movie_review.movie_review.user.Username.
     * 
     * @return the username of this User
     */
    Optional<String> getUsername();
    
    /**
     * Returns the password of this User. The password field corresponds to the
     * database column movie_review.movie_review.user.Password.
     * 
     * @return the password of this User
     */
    Optional<String> getPassword();
    
    /**
     * Returns the email of this User. The email field corresponds to the
     * database column movie_review.movie_review.user.Email.
     * 
     * @return the email of this User
     */
    Optional<String> getEmail();
    
    /**
     * Returns the phone of this User. The phone field corresponds to the
     * database column movie_review.movie_review.user.Phone.
     * 
     * @return the phone of this User
     */
    Optional<String> getPhone();
    
    /**
     * Returns the fullname of this User. The fullname field corresponds to the
     * database column movie_review.movie_review.user.Fullname.
     * 
     * @return the fullname of this User
     */
    Optional<String> getFullname();
    
    /**
     * Returns the address of this User. The address field corresponds to the
     * database column movie_review.movie_review.user.Address.
     * 
     * @return the address of this User
     */
    Optional<String> getAddress();
    
    /**
     * Sets the id of this User. The id field corresponds to the database column
     * movie_review.movie_review.user.ID.
     * 
     * @param id to set of this User
     * @return   this User instance
     */
    User setId(int id);
    
    /**
     * Sets the username of this User. The username field corresponds to the
     * database column movie_review.movie_review.user.Username.
     * 
     * @param username to set of this User
     * @return         this User instance
     */
    User setUsername(String username);
    
    /**
     * Sets the password of this User. The password field corresponds to the
     * database column movie_review.movie_review.user.Password.
     * 
     * @param password to set of this User
     * @return         this User instance
     */
    User setPassword(String password);
    
    /**
     * Sets the email of this User. The email field corresponds to the database
     * column movie_review.movie_review.user.Email.
     * 
     * @param email to set of this User
     * @return      this User instance
     */
    User setEmail(String email);
    
    /**
     * Sets the phone of this User. The phone field corresponds to the database
     * column movie_review.movie_review.user.Phone.
     * 
     * @param phone to set of this User
     * @return      this User instance
     */
    User setPhone(String phone);
    
    /**
     * Sets the fullname of this User. The fullname field corresponds to the
     * database column movie_review.movie_review.user.Fullname.
     * 
     * @param fullname to set of this User
     * @return         this User instance
     */
    User setFullname(String fullname);
    
    /**
     * Sets the address of this User. The address field corresponds to the
     * database column movie_review.movie_review.user.Address.
     * 
     * @param address to set of this User
     * @return        this User instance
     */
    User setAddress(String address);
    
    enum Identifier implements ColumnIdentifier<User> {
        
        ID       ("ID"),
        USERNAME ("Username"),
        PASSWORD ("Password"),
        EMAIL    ("Email"),
        PHONE    ("Phone"),
        FULLNAME ("Fullname"),
        ADDRESS  ("Address");
        
        private final String columnId;
        private final TableIdentifier<User> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "movie_review";
        }
        
        @Override
        public String getSchemaId() {
            return "movie_review";
        }
        
        @Override
        public String getTableId() {
            return "user";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<User> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}