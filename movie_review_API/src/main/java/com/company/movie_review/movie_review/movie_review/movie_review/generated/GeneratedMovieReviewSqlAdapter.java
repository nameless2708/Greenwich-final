package com.company.movie_review.movie_review.movie_review.movie_review.generated;

import com.company.movie_review.movie_review.movie_review.movie_review.MovieReview;
import com.company.movie_review.movie_review.movie_review.movie_review.MovieReviewImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.*;

/**
 * The generated Sql Adapter for a {@link
 * com.company.movie_review.movie_review.movie_review.movie_review.MovieReview}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMovieReviewSqlAdapter implements SqlAdapter<MovieReview> {
    
    private final TableIdentifier<MovieReview> tableIdentifier;
    
    protected GeneratedMovieReviewSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("movie_review", "movie_review", "movie_review");
    }
    
    protected MovieReview apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
            .setId(      resultSet.getInt(1 + offset))
            .setMovieId( getInt(resultSet, 2 + offset))
            .setContent( resultSet.getString(3 + offset))
            .setTag(     getInt(resultSet, 4 + offset))
            .setUserId(  getInt(resultSet, 5 + offset))
            ;
    }
    
    protected MovieReviewImpl createEntity() {
        return new MovieReviewImpl();
    }
    
    @Override
    public TableIdentifier<MovieReview> identifier() {
        return tableIdentifier;
    }
    
    @Override
    public SqlFunction<ResultSet, MovieReview> entityMapper() {
        return entityMapper(0);
    }
    
    @Override
    public SqlFunction<ResultSet, MovieReview> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}