package com.company.movie_review.generated;

import com.company.movie_review.movie_review.movie_review.cast.Cast;
import com.company.movie_review.movie_review.movie_review.cast.generated.GeneratedCastCacheHolder;
import com.company.movie_review.movie_review.movie_review.movie.Movie;
import com.company.movie_review.movie_review.movie_review.movie.generated.GeneratedMovieCacheHolder;
import com.company.movie_review.movie_review.movie_review.movie_cast.MovieCast;
import com.company.movie_review.movie_review.movie_review.movie_cast.generated.GeneratedMovieCastCacheHolder;
import com.company.movie_review.movie_review.movie_review.movie_review.MovieReview;
import com.company.movie_review.movie_review.movie_review.movie_review.generated.GeneratedMovieReviewCacheHolder;
import com.company.movie_review.movie_review.movie_review.user.User;
import com.company.movie_review.movie_review.movie_review.user.generated.GeneratedUserCacheHolder;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.enterprise.datastore.runtime.DataStoreHolder;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStore;
import com.speedment.enterprise.datastore.runtime.entitystore.EntityStoreHolder;
import com.speedment.enterprise.datastore.runtime.fieldcache.FieldCache;
import com.speedment.enterprise.datastore.runtime.fieldcache.MultiFieldCache;
import com.speedment.enterprise.datastore.runtime.statistic.Statistics;
import com.speedment.enterprise.datastore.runtime.util.StatisticsUtil;
import com.speedment.runtime.config.identifier.ColumnIdentifier;

import java.util.Optional;
import java.util.stream.Stream;

import static java.util.Objects.requireNonNull;

/**
 * A holder class for the various caches that are used to speed up the project.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public final class GeneratedMovieReviewDataStoreHolder implements DataStoreHolder {
    
    private final GeneratedCastCacheHolder castHolder;
    private final GeneratedMovieCacheHolder movieHolder;
    private final GeneratedMovieCastCacheHolder movieCastHolder;
    private final GeneratedMovieReviewCacheHolder movieReviewHolder;
    private final GeneratedUserCacheHolder userHolder;
    
    public GeneratedMovieReviewDataStoreHolder(
            GeneratedCastCacheHolder castHolder,
            GeneratedMovieCacheHolder movieHolder,
            GeneratedMovieCastCacheHolder movieCastHolder,
            GeneratedMovieReviewCacheHolder movieReviewHolder,
            GeneratedUserCacheHolder userHolder) {
        this.castHolder        = requireNonNull(castHolder);
        this.movieHolder       = requireNonNull(movieHolder);
        this.movieCastHolder   = requireNonNull(movieCastHolder);
        this.movieReviewHolder = requireNonNull(movieReviewHolder);
        this.userHolder        = requireNonNull(userHolder);
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY> EntityStore<ENTITY> getEntityStore(
            String dbmsName,
            String schemaName,
            String tableName) {
        switch (tableName) {
            case "cast"         : return (EntityStore<ENTITY>) castHolder.getEntityStore();
            case "movie"        : return (EntityStore<ENTITY>) movieHolder.getEntityStore();
            case "movie_cast"   : return (EntityStore<ENTITY>) movieCastHolder.getEntityStore();
            case "movie_review" : return (EntityStore<ENTITY>) movieReviewHolder.getEntityStore();
            case "user"         : return (EntityStore<ENTITY>) userHolder.getEntityStore();
            default : throw new UnsupportedOperationException(
                String.format("Could not find '%s' in database model.", tableName)
            );
        }
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY, CACHE extends FieldCache<CACHE>> CACHE getFieldCache(ColumnIdentifier<ENTITY> columnId) {
        switch (columnId.getTableId()) {
            case "cast"         : return (CACHE) castHolder.getFieldCache((ColumnIdentifier<Cast>) columnId);
            case "movie"        : return (CACHE) movieHolder.getFieldCache((ColumnIdentifier<Movie>) columnId);
            case "movie_cast"   : return (CACHE) movieCastHolder.getFieldCache((ColumnIdentifier<MovieCast>) columnId);
            case "movie_review" : return (CACHE) movieReviewHolder.getFieldCache((ColumnIdentifier<MovieReview>) columnId);
            case "user"         : return (CACHE) userHolder.getFieldCache((ColumnIdentifier<User>) columnId);
            default : throw new UnsupportedOperationException(
                String.format("Could not find '%s' in database model.", columnId.getTableId())
            );
        }
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY, T0, T1, CACHE extends MultiFieldCache<T0, T1, CACHE>> Optional<CACHE> getMultiFieldCache(ColumnIdentifier<ENTITY> firstColumnId, ColumnIdentifier<ENTITY> secondColumnId) {
        return Optional.empty(); // No multi-indexes are used in the project
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public <ENTITY> boolean isHavingMultiFieldCache(ColumnIdentifier<ENTITY> columnId) {
        return false; // No multi-indexes are used in the project
    }
    
    @Override
    public void close() {
        holders().forEach(EntityStoreHolder::close);
    }
    
    @Override
    public Statistics getStatistics() {
        return StatisticsUtil.create(
            holders()
                .toArray(EntityStoreHolder[]::new)
        );
    }
    
    @Override
    public Stream<EntityStoreHolder<?>> holders() {
        return Stream.of(
            castHolder,
            movieHolder,
            movieCastHolder,
            movieReviewHolder,
            userHolder
        );
    }
}